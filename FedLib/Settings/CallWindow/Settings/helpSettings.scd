[ [ 'add', [ 'str', 'num', 'num' ], {|str, num1, num2| (num1 + num2).postln;}, "adds two numbers" ], [ 'addTask', [ 'str' ], {a = {inf.do{c.callFunc("add " ++ rrand(0,100).asString ++ " " ++ rrand(0,100).asString); 0.1.yield}}.fork}, "routine of random adding" ], [ 'stopTask', [ 'str' ], {a.stop}, "stop add routine" ], [ 'add', [ 'str', 'num', 'arr' ], {|str, num, arr| (num + arr).postln;}, "adds one number with an array" ], [ 'boot', [ 'str' ], { s.boot }, "boot server" ], [ 'sine', [ 'str', 'num', 'num' ], {|str, num1, num2| {SinOsc.ar(num1, 0, num2)}.play }, "play sine wave" ], [ 'sineArr', [ 'str', 'arr', 'arr', 'num' ], {|str,arr1,arr2,num| {SinOsc.ar(arr1, num, arr2)}.play }, "play sine wave" ], [ 'ls', [ 'str' ], {c.listSettings;}, "prints one item commnads" ], [ 'mul', [ 'str', 'num', 'num' ], {|str, num1, num2| (num1 * num2).postln;}, "multiply two numbers" ], [ 'arrayID', [ 'str', 'dash' ], {|str,a| a.postln;}, "use dash as array" ], [ 'arrayID', [ 'str', 'arr', 'arr' ], {|str,a,b| (a * b).postln;}, "multipy two arrays" ], [ 'free', [ 'str' ], { s.freeAll; }, "free all synths" ], [ 'sc', [ 'str' ], {|str| c.lang = \sc;}, "supercollider environment" ], [ 'cmd', [ 'str' ], {|str| c.lang = \cmd;}, "call window environment" ] ]